{"version":3,"file":"static/js/529.0c4a22c9.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/PhonebookPage/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/PhonebookPage/ContactForm/ContactForm.jsx","components/PhonebookPage/ContactList/ContactList.styled.js","components/PhonebookPage/ContactList/ContactList.jsx","components/PhonebookPage/Filter/Filter.styled.js","components/PhonebookPage/Filter/Filter.jsx","pages/PhoneBook/PhoneBookPage.styled.js","pages/PhoneBook/PhoneBookPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components'; \n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n    padding: 20px;\n    background-color: white;\n    margin-bottom: 50px; \n`\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    gap: 5px;\n`\n\nexport const Input = styled.input`\n    border: 1px solid darkgray;\n    padding: 5px;\n`\nexport const Button = styled.button`\n    width: 100%;\n    background-color: darkcyan;\n    padding: 10px;\n    color: white;\n    border: none;\n    transition: transform 300ms ease-in-out;\n    &:hover { \n        transform: scale(1.1);\n    }\n`","export const selectContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.filter;\n","import React, { useState } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { Form, Label, Input, Button } from \"./ContactForm.styled\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { notificationSameName, notificationSameNumber } from 'utils/Notifacation/Notifacation';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      notificationSameName(name);\n      return;\n    } else if (contacts.find(contact => contact.number === number)) {\n      notificationSameNumber(number);\n      return;\n    } else {\n      dispatch(addContact({ name, phone: number, id: nanoid() }));\n      resetForm();\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmitForm}>\n      <Label>\n        Name\n        <Input\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label htmlFor=\"\">\n        Number\n        <Input\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};","import styled from 'styled-components'; \n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    padding: 20px;\n    background-color: white;\n`;\n\nexport const Item = styled.li`\n    display: flex;\n    align-items: baseline;\n    justify-content: space-between;\n    width: 100%;\n    gap: 20px;\n`;\n\nexport const DeleteButton = styled.button`\n    background-color: darkcyan;\n    padding: 5px;\n    color: white;\n    border: none;\n    transition: transform 300ms ease-in-out;\n    &:hover { \n        transform: scale(1.1);\n    }\n`","import { List, Item, DeleteButton } from './ContactList.styled';\nimport { useSelector, useDispatch} from 'react-redux';\nimport { useEffect } from 'react';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport { selectContacts, selectError, selectFilter,selectIsLoading } from 'redux/contacts/selectors';\nimport { notificationNoContact, notificationError} from 'utils/Notifacation/Notifacation';\nimport { Loader } from 'utils/Loader/Loader';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n  const onError = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n  const filteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    const filtered = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n    if (filtered.length === 0 && filter) {\n      notificationNoContact(); \n    }\n    return filtered;\n  };\n\n  const contactsToDisplay = filteredContacts(); \n\n\n  return (\n    <List>\n      {isLoading && <Loader />}\n      {onError && notificationError()}\n      {contactsToDisplay.map(({ id, name, phone }) => (\n        <Item key={id}>\n          {name}: {phone}\n          <DeleteButton \n              type=\"button\"   \n              onClick={() => dispatch(deleteContact(id))} \n          >\n            Delete\n          </DeleteButton>\n        </Item>\n      ))}\n    </List>\n  );\n};","import styled from 'styled-components';\n\nexport const FilterWrapper = styled.div`\n    display: flex;\n    padding: 20px;\n    align-items: center;\n    justify-content: center;\n    background-color: white;\n    \n`;\n\nexport const Label = styled.label`\n    width: 100%;\n`;\n\nexport const Input = styled.input`\n    border: 1px solid darkgray;\n    padding: 5px 0px;\n    width: 100%;\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n`;\n","import React from 'react';\nimport { FilterWrapper, Label, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\n\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n\n  const onChange = e => {\n    dispatch(setFilterValue(e.currentTarget.value));\n  };\n  return (\n  <FilterWrapper>\n    <Label>\n      Find name\n      <Input type=\"text\" value={filterValue} onChange={onChange} placeholder=\" \" />\n    </Label>\n  </FilterWrapper>\n  );\n}","import styled from 'styled-components'; \n\nexport const Wrapper = styled.div`\n    max-width: 50%;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 20px;\n    background-color: paleturquoise;\n`\n\nexport const Title = styled.h1`\n    font-size: 3em;\n    text-align: center;\n    margin-bottom: 30px;\n`\n\nexport const ContactTitle = styled.h2`\n    font-size: 2em;\n    text-align: center;\n    margin-bottom: 30px;\n`","import { useSelector } from \"react-redux\";\nimport { ContactForm } from \"components/PhonebookPage/ContactForm/ContactForm\";\nimport { ContactList } from \"components/PhonebookPage/ContactList/ContactList\";\nimport { Filter } from \"components/PhonebookPage/Filter/Filter\";\nimport { Wrapper, Title, ContactTitle } from \"./PhoneBookPage.styled\";\nimport { Loader } from \"utils/Loader/Loader\";\nimport { selectIsLoading } from \"redux/contacts/selectors\";\n\nexport const PhoneBookPage = () => {\n\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <Wrapper>\n    {isLoading && <Loader />}\n      <Title>Phonebook</Title>\n        <ContactForm></ContactForm>\n      <ContactTitle>Contacts</ContactTitle>\n        <Filter/>\n        <ContactList/>\n    </Wrapper>\n  );\n};"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","styled","Label","Input","Button","selectContacts","state","contacts","items","selectError","error","selectIsLoading","isLoading","selectFilter","filter","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","target","value","resetForm","onSubmit","preventDefault","find","contact","toLowerCase","notificationSameName","notificationSameNumber","addContact","phone","onChange","type","pattern","title","required","htmlFor","List","Item","DeleteButton","ContactList","onError","useEffect","fetchContacts","contactsToDisplay","normalizedFilter","filtered","includes","length","notificationNoContact","filteredContacts","Loader","notificationError","map","onClick","deleteContact","FilterWrapper","Filter","filterValue","setFilterValue","currentTarget","placeholder","Wrapper","Title","ContactTitle","PhoneBookPage"],"sourceRoot":""}